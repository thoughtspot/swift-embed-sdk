name: Cross-Repository Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. 1.0.0)'
        required: true
        type: string
      public_repo_name:
        description: 'Public repository name (auto-detected if empty)'
        required: false
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean

jobs:
  validate-inputs:
    name: Validate Release Inputs
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      public-repo: ${{ steps.validate.outputs.public-repo }}
      is-prerelease: ${{ steps.validate.outputs.is-prerelease }}
    steps:
      - name: Validate inputs and determine repositories
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ -n "${{ github.event.inputs.public_repo_name }}" ]]; then
            PUBLIC_REPO="${{ github.repository_owner }}/${{ github.event.inputs.public_repo_name }}"
          else
            REPO_NAME="${{ github.event.repository.name }}"
            PUBLIC_REPO_NAME="${REPO_NAME%-private}"
            PUBLIC_REPO="${{ github.repository_owner }}/${PUBLIC_REPO_NAME}"
          fi
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "::error::Invalid version format. Expected semantic versioning (1.0.0)"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "public-repo=$PUBLIC_REPO" >> $GITHUB_OUTPUT
          echo "is-prerelease=${{ github.event.inputs.prerelease }}" >> $GITHUB_OUTPUT

  build-and-test:
    name: Build and Test Project
    runs-on: macos-latest
    needs: validate-inputs
    steps:
      - uses: actions/checkout@v3

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Build project
        run: |
          xcodebuild \
            -scheme SwiftEmbedSDK \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.6' \
            -sdk iphonesimulator \
            clean build

      - name: Test project
        run: |
          xcodebuild test \
            -scheme SwiftEmbedSDK \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.6'

  create-public-release:
    name: Create Release in Public Repository
    runs-on: ubuntu-latest
    needs: [validate-inputs, build-and-test]
    steps:
      - name: Generate GitHub App token
        id: github-app-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.CROSS_REPO_RELEASE_BOT_APP_ID }}
          private_key: ${{ secrets.CROSS_REPO_RELEASE_BOT_PRIVATE_KEY }}
          repository: ${{ needs.validate-inputs.outputs.public-repo }}

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-inputs.outputs.version }}"
          PROJECT_NAME="${{ github.event.repository.name }}"
          PROJECT_NAME="${PROJECT_NAME%-private}"
          cat > release_notes.md << EOF
          ## ${PROJECT_NAME} v${VERSION}
          ### What's New
          Mixpanel Tracking is enabled from this version.
          ---
          **Full Changelog**: https://github.com/${{ needs.validate-inputs.outputs.public-repo }}/commits/v${VERSION}
          EOF

      - name: Create release in public repository
        id: create-release
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.github-app-token.outputs.token }}
          script: |
            const fs = require('fs');
            const [owner, repo] = '${{ needs.validate-inputs.outputs.public-repo }}'.split('/');
            const version = '${{ needs.validate-inputs.outputs.version }}';
            const tagName = `v${version}`;
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');
            try {
              const release = await github.rest.repos.createRelease({
                owner: owner,
                repo: repo,
                tag_name: tagName,
                target_commitish: 'main',
                name: `v${version}`,
                body: releaseNotes,
                draft: false,
                prerelease: ${{ needs.validate-inputs.outputs.is-prerelease }}
              });
              return { release_id: release.data.id, release_url: release.data.html_url };
            } catch (error) {
              if (error.status === 422 && error.message.includes('already_exists')) {
                const existingRelease = await github.rest.repos.getReleaseByTag({
                  owner: owner,
                  repo: repo,
                  tag: tagName
                });
                return { release_id: existingRelease.data.id, release_url: existingRelease.data.html_url, already_exists: true };
              }
              throw error;
            }

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [validate-inputs, create-public-release]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## Cross-Repository Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate-inputs.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Public Repository:** ${{ needs.validate-inputs.outputs.public-repo }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.create-public-release.result }}" == "success" ]]; then
            echo "**Status:** ✅ Release created successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ❌ Release failed" >> $GITHUB_STEP_SUMMARY
          fi

